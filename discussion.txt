
Foundation: Spring with Spring Boot framework
==============================================

trainer profile
================
https://www.linkedin.com/in/rajeevguptajavatrainer/

sw required
===============
jdk 17
maven
https://maven.apache.org/download.cgi
intellij/sts
https://dist.springsource.com/release/STS/index.html

mysql
https://dev.mysql.com/downloads/mysql/

sw req:
==========
jdk 17+ maven + intellij/sts + mysql + laptop 8gb/16gb + ssd

code :
=========
https://github.com/rgupta00/spring_spring_boot_microservicetraining

study material stuff:
--------------------
https://drive.google.com/file/d/1FSIC0ddNis0VAJS5bq5V8RPueOAjjQxg/view
https://drive.google.com/file/d/180t5EqDpifKF0UKSi86Z9P74RiBpZbCV/view?usp=sharing


Primary Feedback: 
------------------
https://forms.office.com/r/awejz2TL0W

youtube
=======
https://www.youtube.com/@busycoderacademy

Foundation: Spring with Spring Boot framework
==============================================
5 session 5X4=20hr

Session wise plan:

session 1: Introduction to solid and design patterns
Session 2: Spring DI, AOP
Session 3: Spring MVC,Spring Hibernate integration
Session 4: REST API with Spring Boot
Session 5: Spring Security, Spring Boot 3.0 Fundamentals








class StackImpUsingArray {
	 int x[];
	 int SIZE;
	 int top;
	
	public StackImpUsingArray(int size) {
		this.SIZE=size;
		top=-1;
		
	}
	
	
	public void push(int element){
		if(top>=SIZE)
			return ;
		else
			x[top++]=element;
	}
	
	
	public int pop(){
		if(top==-1)
			return -99;
		else
			return x[top--];
	}
}
 
      
Product store application:
---------------------------
public class Product {
    private int id;
    private String name;
    private BigDecimal price;
}
	
	
public interface ProductDao {
    public List<Product> getAll();
    public void addProduct(Product product);
    public void updateProduct(int productId, Product product);
    public Product getById(int productId);
    public void deleteProduct(int productId);
}


