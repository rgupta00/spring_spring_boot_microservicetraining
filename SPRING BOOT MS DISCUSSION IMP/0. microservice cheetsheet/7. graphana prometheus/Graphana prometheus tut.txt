
Graphana, Prometheus Basics tutorial
______________________________
	=> once we deploy the app, we want to provide ehe best expericen to the user
	=> we should provide app health monitoring in our project 
	=> we should get alter if something goes wrong in the application before user is effected

	=> we can have many time of application health monitoring

	% of memory consumption
	 heap memory usages
	% of cpu consumption
	gc time taken etc

Prometheus
__________
	Prometheus is an open-source monitoring system that was originally built by SoundCloud. 

	It consists of the following core components -
		A. A data scraper that pulls metrics data over HTTP periodically at a configured interval.

		B. A time-series database to store all the metrics data.

		C. A simple user interface where you can visualize, query, and monitor all the metrics.

Grafana
____________
	Grafana allows you to bring data from various data sources like Elasticsearch, 
	Prometheus, Graphite, InfluxDB etc, and visualize them with beautiful graphs.

	It also lets you set alert rules based on your metrics data. 
	When an alert changes state, it can notify you over email, slack, or various other channels.

	Note that, Prometheus dashboard also has simple graphs. But Grafanaâ€™s graphs are way better. 

	

	Prometheus vs Graphana
	_____________________
	Prometheus collects rich metrics and provides a powerful querying language; 
	Grafana transforms metrics into meaningful visualizations. 
	Both are compatible with many, if not most, data source types. 
	In fact, it is very common for DevOps teams to run Grafana on top of Prometheus.
	




Prometheus: Hello world configuration:
__________________________________

Step 1: create spring boot application with actuator, and prometheus dep
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		
		
		
server:
  port: 8080
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
  endpoint:
    prometheus:
      enabled: true
    metrics:
      enabled: true		
		
		

step 2: download sw

Download and configure Prometheus: run on port : 9090
https://prometheus.io/download/

download grafana:
wget https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.2.linux-amd64.tar.gz


Step 1: download and configure Prometheus: run on port : 9090
https://github.com/prometheus/prometheus/releases/download/v2.35.0/prometheus-2.35.0.linux-amd64.tar.gz



Step 3: configure spring boot application monitoring to  Prometheus:
	search google (configure prometheus to monitor itself)
	
	
prometheus.yml

global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: 'codelab-monitor'

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:9090']
 
  - job_name: 'spring-actuator'
    metrics_path: '/actuator/prometheus'
    scrape_interval: 5s
    static_configs:
    - targets: ['localhost:8080']
    
    
Start prometheus
./prometheus 


4.start grafana:
 bin/grafana-server
 http://localhost:9090
up


grafana dashboard
http://localhost:3000/

Dashboard-> new import -> grafana dashboard id -->put that id---> ui is created

	 search google SpringBoot APM Dashboard





tut ref:
https://www.tutorialworks.com/spring-boot-prometheus-micrometer/
https://howtodoinjava.com/spring-boot/actuator-endpoints-example/
https://www.callicoder.com/spring-boot-actuator/

to kill a port on ubuntu:

sudo kill -9 `sudo lsof -t -i:9001`
_______________________________

https://grafana.com/grafana/download
go to port 3000 configure datasource ie Prometheus and create new dashboard

